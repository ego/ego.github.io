<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>Blog hello, world!</title><url>/post/blog-hello-world.html</url><categories><category>engineering</category><category>static-site</category></categories><tags><tag>Static site</tag><tag>Hugo</tag><tag>Theme template</tag><tag>Blog</tag></tags><content type="html"> After all, my blog has been released! There are a lot of tools for doing personal blog. You can choose any one or even build it by yourself. I decided move forward with static site solution, like many ather developers. Reading this article you can get more about building personal blog, static-site, theme, Hugo, NexT.
Static site and Hugo Hugo Github Hugo Hugo quick start Theme template for Hugo Other problem is to chose template theme. There are a douse-nt of variants hugo themes . I take one Hugo theme next and Hugo theme next starter as a current starter.
Deployment and GitHub Pages No cost option is to use public free hosting GitHub Pages. Benefits are:
It is a code repository with version control It can be as hosting GitHub Pages It has pipline aka GitHub Actions It has ready to use solution like Hugo hosting on GitHub My site is published to these domains
ego.github.io ego.systemdef.com Setup custom subdomain
About custom domains and GitHub Pages Managing a custom domain for your GitHub Pages site I do some customisations for theme and created helpers scripts for release.
These website will be mostly for my personal usage as a place for information of different topics. But mostly I will post engineering staff.
Have fun 😆,
Sincerely yours Ego, Pray for 🇺🇦</content></entry><entry><title>How to fix GitHub repository language</title><url>/post/engineering/github-repository-language.html</url><categories><category>engineering</category><category>GitHub</category></categories><tags><tag>GitHub</tag><tag>git-settings</tag><tag>linguist</tag></tags><content type="html"> How to fix GitHub repository code language if you have a question 😄 Create file in the root directory of git repository .gitattributes
1 themes/* linguist-vendored GitHub use Linguist project to detect blob languages.
Links
File gitattributes Read more about Linguist overrides Changing the Repo Language Shown</content></entry><entry><title>MacOps</title><url>/post/projects/MacOS.html</url><categories><category>projects</category><category>Automation</category><category>AppleScript</category><category>JavaScript</category><category>Bash scripts</category><category>Python</category><category>iTerm2</category><category>Sublime</category></categories><tags><tag>macOS</tag><tag>MacOps</tag><tag>MacBook</tag><tag>Automation</tag><tag>AppleScript</tag><tag>JavaScript</tag><tag>Shell scripts</tag><tag>Bash scripts</tag><tag>Script Editor</tag><tag>Python</tag><tag>Finder</tag><tag>iTerm2</tag><tag>Sublime</tag></tags><content type="html"><![CDATA[ Project MacOps Repository: https://github.com/ego/MacOps MacOS automate tools and scripts. AppleScript and JavaScript for Automation (JXA).
Motivation Sometimes macOS application state can be broken, so we need way to restore it especially when macOS cannot do it for us.
Project automation features: * Save Finder tabs * Save iTerm2 tabs * Save Sublime tabs * Save Sublime file history from Session Save all opened Finder tabs File: SaveFinderTabs.scpt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #!/usr/bin/env osascript -l JavaScript console.log(&#34;Get and save Finder tabs.&#34;); const basePath = &#34;~/Workspaces/Finder/Tabs&#34;; const filePath = `${basePath}/$(date &#39;+%Y-%m-%d-%H&#39;).txt`; const Finder = Application(&#34;Finder&#34;); Finder.includeStandardAdditions = true; var tabSet = new Set(); const windows = Finder.finderWindows(); windows.forEach((win) =&gt; { const tab = win.target(); const path = decodeURIComponent(tab.url()).slice(7); tabSet.add(path); }); console.log(`Found tabs: ${tabSet.size}.`); var fileContent = &#34;&#34;; for (const item of tabSet) { fileContent += (item + &#39;\n&#39;); }; console.log(`Save Finder tabs to file ${basePath}.`); app = Application.currentApplication() app.includeStandardAdditions = true; app.doShellScript(`mkdir -p ${basePath}`); app.doShellScript(`echo ${JSON.stringify(fileContent)} &gt; ${filePath}`); This AppleScript/JavaScript script creates folders in ~/Workspaces/Finder/Tabs/ and save all Finder tabs to new file with name +%Y-%m-%d-%H'.txt.
Save all opened iTerm2 tabs File: SaveiTerm2Tabs.scpt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env osascript -l JavaScript console.log(&#34;Get and save iTerm tabs.&#34;); const basePath = &#34;~/Workspaces/iTerm2/Tabs&#34;; const filePath = `${basePath}/$(date &#39;+%Y-%m-%d-%H&#39;).txt`; const iTerm2 = Application(&#34;iTerm2&#34;); iTerm2.includeStandardAdditions = true; var tabSet = new Set(); const tabs = iTerm2.currentWindow().tabs(); JSON.stringify(tabs.length); tabs.forEach((tab) =&gt; { // iterm2 https://iterm2.com/documentation-scripting.html // Variables: https://iterm2.com/documentation-variables.html const path = tab.currentSession().variable({named: &#34;path&#34;}) tabSet.add(path) }); console.log(`Found tabs: ${tabSet.size}.`); var fileContent = &#34;&#34;; for (const item of tabSet) { fileContent += (item + &#39;\n&#39;); }; console.log(`Save Finder tabs to file ${basePath}.`); app = Application.currentApplication() app.includeStandardAdditions = true; app.doShellScript(`mkdir -p ${basePath}`); app.doShellScript(`echo ${JSON.stringify(fileContent)} &gt; ${filePath}`); This AppleScript/JavaScript script creates folders in ~/Workspaces/iTerm2/Tabs/ and save all iTerm2 tabs to new file with name +%Y-%m-%d-%H'.txt.
Note about AppleScript Note about JavaScriptForAutomation How to run AppleScript/JavaScript with macOS Script Editor Script Editor Save all opened Sublime tabs from Sublime session File: SaveSublimeTabs.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #!/bin/bash # https://unix.stackexchange.com/questions/548806/how-to-get-just-two-items-of-a-json-like-file # https://softhints.com/recover-unsaved-files-sublime-linux-mac/#google_vignette SUBLIME_TABS_PATH=~/Downloads/State/SublimeTabs SUBLIME_FILE_NAME=&#34;$(date &#39;+%Y-%m-%d-%H&#39;).txt&#34; SUBLIME_LOCAL_FIND=`find ~/&#39;Library/Application Support/Sublime Text/Local&#39; -maxdepth 1 -type f -name &#34;*.sublime_session&#34;` echo echo &#39;Parse and save Sublime tabs ...&#39; echo mkdir -p &#34;$SUBLIME_TABS_PATH&#34; OIFS=&#34;$IFS&#34; IFS=$&#39;\n&#39; for file in $SUBLIME_LOCAL_FIND do echo &#34;Processing file: $file&#34; jq -r &#39;.windows[]|.buffers[]|.file&#39; &#34;$file&#34; &gt;&gt; &#34;$SUBLIME_TABS_PATH/_$SUBLIME_FILE_NAME&#34; echo &#34;------------------------------------------------------------&#34; echo done IFS=&#34;$OIFS&#34; awk &#39;!seen[$0]++&#39; &#34;$SUBLIME_TABS_PATH/_$SUBLIME_FILE_NAME&#34; &gt; &#34;$SUBLIME_TABS_PATH/$SUBLIME_FILE_NAME&#34; echo &#39;Done&#39; This sh script creates folders in ~/Downloads/State/SublimeTabs/, parse *.sublime_session files and save all Sublime tabs to new file with name +%Y-%m-%d-%H'.txt.
Save all opened Sublime tabs from Sublime session file_history This SaveSublimeFileHistory.sh sh script also parse file_history sections from *.sublime_session and save to ~/Downloads/State/SublimeFileHistory/.
Save all opened Sublime tabs from Sublime with Console snippet If you have opened Sublime and want to save all tabs, click to View then Show Console and paste this snippet Python code SaveSublimeCurrentTabs.py 1 2 3 4 5 6 7 8 import datetime; import pathlib; name = datetime.datetime.now().strftime(&#39;%Y-%m-%d-%H&#39;); tabs = list(filter(None, [v.file_name() for v in window.views()])); home = str(pathlib.Path.home()); f = open(f&#34;{home}/Workspaces/Sublime/Tabs/{name}.txt&#34;, &#34;w&#34;); f.write(&#34;\n&#34;.join(tabs)); f.close(); As a result you get file with all tabs (full path). Good luck, and save your tabs history 😄
]]></content></entry><entry><title>Software Engineering Blogs</title><url>/post/engineering/blogs.html</url><categories><category>engineering</category></categories><tags><tag>software</tag><tag>technical</tag><tag>Blog</tag></tags><content type="html"> The most interesting software engineering blogs The list of technical blogs.
developer.nvidia.com/blog openai.com/blog openai.com/research github.blog microsoft.com/en-us/research/blog/ microsoft.com/en-us/research blog.jetbrains.com/datalore ai.googleblog.com blog.google</content></entry><entry><title>OpenAI, ChatGPT, DALL·E 2, create image from text prompt</title><url>/post/ai/openai-chatgpt-dall-e-2.html</url><categories><category>ai</category><category>engineering</category><category>OpenAI</category></categories><tags><tag>ai</tag><tag>engineering</tag><tag>ChatGPT</tag><tag>DALL·E 2</tag><tag>Python</tag><tag>Rick and Morty</tag><tag>Python</tag><tag>openai</tag><tag>pathlib</tag><tag>artificial intelligence</tag><tag>CLI API</tag><tag>ChatGPT prompts</tag></tags><content type="html"><![CDATA[ This post is describe how to generate image from text prompt. How to use OpenAI Go to the website openai.com and create user profile. Generate new OPENAI_API_KEY. Use public API DALL·E 2 DALL·E 2 is a revolutionary artificial intelligence system that can generate realistic images and artwork based on descriptions provided in natural language.
Install OpenAI CLI 1 2 pip install openai export OPENAI_API_KEY=my-secret OpenAI CLI create image 1 openai api image.create -p &#34;Artificial Intelligence, future, cyberpunk, with hex color 33FFE9 and color pink&#34; -n 4 Docs api image.create OpenAI Python script create image Some fun Python code to work with Rick and Morty and OpenAI Image API.
1import shutil 2import pathlib 3import openai 4import requests # pip install requests 5from PIL import Image 6 7HOME = str(pathlib.Path.home()) 8openai.api_key = &#34;MY_SECRET_KEY&#34; 9 10def save_image(url, name): 11 r = requests.get(url, stream=True) 12 if r.status_code == 200: 13 with open(f&#39;{HOME}/Downloads/rick/{name}.png&#39;, &#39;wb&#39;) as f: 14 r.raw.decode_content = True 15 shutil.copyfileobj(r.raw, f) 16 17 18image_urls = [] 19prompts = [ 20 &#34;Rick and Morty stuck in a time loop&#34;, 21 &#34;Rick and Morty sitting on a couch, looking frustrated&#34;, 22] 23for prompt in prompts: 24 response = openai.Image.create( 25 prompt=prompt, 26 n=4, 27 size=&#34;1024x1024&#34; 28 ) 29 for data in response[&#39;data&#39;]: 30 image_urls.append(data[&#39;url&#39;]) 31 32for i, url in enumerate(image_urls): 33 save_image(url, i) API openai.Image.create_edit has some limitation, so we need to compress input image. Input images:
1foo = Image.open(f&#34;{HOME}/Downloads/rick/image_edit.png&#34;) 2foo = foo.resize((1080,1080),Image.LANCZOS) 3foo.save(f&#34;{HOME}/Downloads/rick/image_edit2.png&#34;, optimize=True, quality=75) 4 5foo1 = Image.open(f&#34;{HOME}/Downloads/rick/image_mask.png&#34;) 6foo1 = foo1.resize((1080,1080),Image.LANCZOS) 7foo1.save(f&#34;{HOME}/Downloads/rick/image_mask2.png&#34;, optimize=True, quality=75) Size optimized images:
and then we can make API call
1image_urls2 = [] 2response = openai.Image.create_edit( 3 image=open(f&#34;{HOME}/Downloads/rick/image_edit2.png&#34;, &#34;rb&#34;), 4 mask=open(f&#34;{HOME}/Downloads/rick/image_mask2.png&#34;, &#34;rb&#34;), 5 prompt=&#34;Rick and Morty stuck in a time loop&#34;, 6 n=4, 7) 8for data in response[&#39;data&#39;]: 9 image_urls2.append(data[&#39;url&#39;]) 10 11for i, url in enumerate(image_urls2): 12 save_image(url, i) Result is not so great but if you spend some time to create good prompt, you will get better one.
Links
OpenAI cookbook Awesome chatgpt prompts ]]></content></entry><entry><title>Artificial Intelligence programming autocompletion tool for developers</title><url>/post/ai/programming-ai-tools.html</url><categories><category>ai</category><category>engineering</category><category>OpenAI</category></categories><tags><tag>ai</tag><tag>engineering</tag><tag>OpenAI Codex</tag><tag>GitHub Copilot</tag></tags><content type="html"> This post describes how to generate code with Artificial Intelligence. Work In Progress &amp;hellip; https://github.com/features/copilot/ https://openai.com/blog/openai-codex/ https://openai.com/api/ https://www.warp.dev/ https://github.com/openai/openai-cookbook#1-write-code https://visualstudio.microsoft.com/services/intellicode/ https://www.tabnine.com/ https://plugins.jetbrains.com/plugin/13574-aixcoder-code-completer https://www.useblackbox.io/landingPage https://aws.amazon.com/codewhisperer/ https://www.codiga.io/ https://datalore.jetbrains.com/ https://github.com/CodedotAl/gpt-code-clippy https://github.com/samrawal/emacs-secondmate https://ai.googleblog.com/2022/07/ml-enhanced-code-completion-improves.html https://sourcery.ai/ https://codegeex.ai/en-US/ https://codegeex.ai/codeTranslator https://codegeex.ai/playground https://github.com/EleutherAI/gpt-neo https://gpt3demo.com/ Image generated with deepai.org and a prompt Artificial Intelligence programming autocompletion tool for developers.</content></entry><entry><title>About</title><url>/about.html</url><categories/><tags/><content type="html"> Welcome to my website!
Thank you for visiting my blog and I hope you enjoy reading about my experiences and insights in the world of software engineering .
Software engineering As a results-driven software engineer with over 15 years of focused experience, I have a proven track record of delivering robust production code for high-volume businesses across various industries, including e-commerce and large retailers, game development , VoIP telecommunications, and web-based scalable services and systems . I have also worked with different parts of over Globe , for both the EU and US markets.
Education My professional journey began at the university, where I received a relevant education and obtained a master&amp;rsquo;s degree.
Soft skills From my point of view, I can say, that I sophisticated problem solver and enthusiastic team player. My coworkers know me as a deeply critical thinker who believes in logic and deductive reasoning .
Work and life My main work is related to developing software systems , the computation , and the mass-users serving over World Wide Web (WWW), Internet . So my focus is on related to software engineering topics, scalable and distributed systems, data engineering, cloud computing and so on.
I have a passion for finding efficient and simple solutions to real-world problems , and understand the importance of balancing good code quality with timely results. Throughout my career, I have spent a lot of my time leading teams, and I am proud of the results that my teams have been able to achieve. I take pride in my ability to make wise technology and architecture choices on a consistent basis.
I have no special talents. I am only passionately curious. Albert Einstein I am passionate about programming languages and researching, and constantly seek out new ideas and solutions. I easily generate new ideas, possibilities, and design elegant solutions.
I believe in intuition and inspiration. Imagination is more important than knowledge. Albert Einstein I am always striving to improve my skills and knowledge in order to stay ahead of the World curve and be the best software engineer I can be.
For I was conscious that I knew practically nothing&amp;hellip; Plato&amp;rsquo;s account of the philosopher Socrates, Apology 22d Sincerely yours Ego, Pray for 🇺🇦</content></entry><entry><title>Friends</title><url>/flinks.html</url><categories/><tags/><content type="html"></content></entry></search>