<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>Blog hello, world!</title><url>/post/blog-hello-world.html</url><categories><category>engineering</category><category>static-site</category></categories><tags><tag>Static site</tag><tag>Hugo</tag><tag>Theme template</tag><tag>Blog</tag></tags><content type="html"> After all, my blog has been released! There are a lot of tools for doing personal blog. You can choose any one or even build it by yourself. I decided move forward with static site solution, like many ather developers. Reading this article you can get more about building personal blog, static-site, theme, Hugo, NexT.
Static site and Hugo Hugo Github Hugo Hugo quick start Ego customized hugo-theme-next Theme template for Hugo Other problem is to chose template theme. There are a douse-nt of variants hugo themes . I take one Hugo theme next and Hugo theme next starter as a current starter with customized option ego/hugo-theme-next .
Deployment and GitHub Pages No cost option is to use public free hosting GitHub Pages. Benefits are:
It is a code repository with version control It can be as hosting GitHub Pages It has pipline aka GitHub Actions It has ready to use solution like Hugo hosting on GitHub My site is published to these domains
ego.github.io ego.systemdef.com Setup custom subdomain
About custom domains and GitHub Pages Managing a custom domain for your GitHub Pages site I do some customisations for theme and created helpers scripts for release.
These website will be mostly for my personal usage as a place for information of different topics. But mostly I will post engineering staff.
Have fun ðŸ˜†, Sincerely yours Ego, Pray for ðŸ‡ºðŸ‡¦</content></entry><entry><title>Python Packaging Tools</title><url>/note/python-packaging-tools.html</url><categories><category>note</category></categories><tags><tag>python</tag><tag>packaging</tag><tag>tools</tag></tags><content type="html"> A note on Python Packaging Tools You can start from here
Python Packaging Tool recommendations Packaging Python Projects The Packaging Flow Key tools Bootstrap process of creating new Python Package
poetry pip-tools hatch hatch intro pdm pdm into flit pyscaffold poetry nice and modern. pip-tools I had cooked it before, good but require a lot of actions. hatch and pdm did not suit me, I tried but no results.
Lets discovery pyscaffold
1python3 -m venv .env 2source .env/bin/activate 3 4pip install --upgrade pyscaffold[all] 5putup -i new_project 6 7git tag v0.1.0 8tox -e docs 9tox -e build 10tox -e publish -- --repository pypi Awesome! Python package is published =)
Very nice but a little bit outdated. If add modern stack, it will be the best bootstrapping tool for Python ecosystem!
Hint: give you an idea for tooling development.</content></entry><entry><title>Modular Mojo</title><url>/note/modular-mojo.html</url><categories><category>note</category></categories><tags><tag>modular</tag><tag>mojo</tag></tags><content type="html"><![CDATA[ A note on Modular Mojo Some note about Modular and Mojo Mojo ðŸ”¥ â€” a new programming language for all AI developers.
Mojo combines the usability of Python with the performance of C, unlocking unparalleled programmability of AI hardware and extensibility of AI models.
Why Mojo? &ldquo;Mojo may be the biggest programming language advance in decades.&rdquo;
&ldquo;Language thatâ€™s as elegant as Python and as fast as expert-written C, allows me to use one language to write everything from the application server, to the model architecture and the installer too, and lets me debug and profile my code directly in the language in which I wrote it.&rdquo;
Mojo programming manual Mojo roadmap ModularML GitHub Mojo launch jax Chris Lattner Modular The taste of Mojo:
1$ cat hello.ðŸ”¥ 2def main(): 3 print(&#34;hello world&#34;) 4 for x in range(9, 0, -3): 5 print(x) 6$ mojo hello.ðŸ”¥ 7hello world 89 96 103 11$ 1def your_function(a, b): 2 let c = a 3 # Uncomment to see an error: 4 # c = b # error: c is immutable 5 6 if c != b: 7 let d = b 8 print(d) 9 10your_function(2, 3) 1def sort(v: ArraySlice[Int]): 2 for i in range(len(v)): 3 for j in range(len(v) - i - 1): 4 if v[j] &gt; v[j + 1]: 5 swap(v[j], v[j + 1]) 1struct MyPair: 2 var first: Int 3 var second: F32 4 5 def __init__(self, first: Int, second: F32): 6 self.first = first 7 self.second = second 1struct HeapArray: 2 var data: Pointer[Int] 3 var size: Int 4 var cap: Int 5 6 fn __init__(self&amp;): 7 self.cap = 16 8 self.size = 0 9 self.data = Pointer[Int].alloc(self.cap) 10 11 fn __init__(self&amp;, size: Int, val: Int): 12 self.cap = size * 2 13 self.size = size 14 self.data = Pointer[Int].alloc(self.cap) 15 for i in range(self.size): 16 self.data.store(i, val) 17 18 fn __copyinit__(self&amp;, other: Self): 19 self.cap = other.cap 20 self.size = other.size 21 self.data = Pointer[Int].alloc(self.cap) 22 for i in range(self.size): 23 self.data.store(i, other.data.load(i)) 24 25 fn __del__(owned self): 26 self.data.free() 27 28 fn dump(self): 29 print_no_newline(&#34;[&#34;) 30 for i in range(self.size): 31 if i &gt; 0: 32 print_no_newline(&#34;, &#34;) 33 print_no_newline(self.data.load(i)) 34 print(&#34;]&#34;) Waiting for the first public compiler version from Chris Lattner and Modular Mojo team.
]]></content></entry><entry><title>GitHub Awesome</title><url>/post/open-source/github-awesome.html</url><categories><category>open-source</category></categories><tags><tag>open-source</tag><tag>GitHub</tag><tag>github-awesome</tag></tags><content type="html"> This post is describe GitHub awesome repositories Researching https://github.com/topics/{var} https://github.com/search?q={var} GitHub Awesome Repositories https://github.com/topics/awesome Scalability https://github.com/binhnguyennus/awesome-scalability BigData https://github.com/newTendermint/awesome-bigdata System design / Distributed Systems https://github.com/madd86/awesome-system-design http://www.aosabook.org/en/distsys.html https://github.com/manuzhang/awesome-streaming Have fun, Ego!</content></entry><entry><title>Software Engineering Courses</title><url>/post/courses/software-engineering-courses.html</url><categories><category>courses</category></categories><tags><tag>courses</tag><tag>coursera.org</tag><tag>Software Engineer</tag><tag>DevOps Engineer</tag><tag>Data Engineer</tag><tag>AIOps</tag><tag>MLOps</tag><tag>Software Systems Architect</tag><tag>Infrastructure</tag><tag>Scale</tag><tag>Distributed</tag><tag>Cloud</tag><tag>AWS</tag><tag>Google</tag></tags><content type="html"><![CDATA[ This post is describe selected courses for software engineering Place to keep and organize greate courses for software developers. Based on my own. Previous posts Every developer, programmer or engineer should have main wide common specializations aka Python developer. Also, specific one and/or two areas of knowledge could make you better. Additional knowledge and advanced skills in something very tiny, rare, and valuable in the since space.
Software Engineer - Internet and World Wide Web (WWW) technologies DevOps Engineer - Infrastructure, scale, reliability, cloud Data Engineer - BigData, Data lake, data streaming, and analytics DevOps ML/AI Engineer - AIOps, MLOps Software Systems Architect - System design and distributed systems So, I can divide all onto these spaces
Application space System space Distributed and high scalability spaces Cloud spaces Data/ML/AI space Software architecture and design Main topics which has value for me:
DevOps AIOps MLOps AWS Cloud Google Cloud Distributed systems Artificial intelligent specializations and courses Machine learning specializations Machine learning introduction
https://www.coursera.org/specializations/machine-learning-introduction Supervised Machine Learning: Regression and Classification
https://www.coursera.org/learn/machine-learning?specialization=machine-learning-introduction Advanced Learning Algorithms
https://www.coursera.org/learn/advanced-learning-algorithms?specialization=machine-learning-introduction Unsupervised Learning, Recommenders, Reinforcement Learning
https://www.coursera.org/learn/unsupervised-learning-recommenders-reinforcement-learning?specialization=machine-learning-introduction AI For Everyone
https://www.coursera.org/learn/ai-for-everyone Google machine learning Google Cloud Big Data and Machine Learning Fundamentals
https://www.coursera.org/learn/gcp-big-data-ml-fundamentals How Google does Machine Learning https://www.coursera.org/learn/google-machine-learning Launching into Machine Learning
https://www.coursera.org/learn/launching-machine-learning TensorFlow on Google Cloud
https://www.coursera.org/learn/intro-tensorflow Feature Engineering
https://www.coursera.org/learn/feature-engineering Machine Learning in the Enterprise
https://www.coursera.org/learn/art-science-ml Production Machine Learning Systems
https://www.coursera.org/learn/gcp-production-ml-systems Recommendation Systems on Google Cloud
https://www.coursera.org/learn/recommendation-models-gcp Deep learning specializations https://www.coursera.org/specializations/deep-learning Neural Networks and Deep Learning
https://www.coursera.org/learn/neural-networks-deep-learning?specialization=deep-learning Improving Deep Neural Networks: Hyperparameter Tuning, Regularization and Optimization
https://www.coursera.org/learn/deep-neural-network?specialization=deep-learning Structuring Machine Learning Projects
https://www.coursera.org/learn/machine-learning-projects?specialization=deep-learning Convolutional Neural Networks
https://www.coursera.org/learn/convolutional-neural-networks?specialization=deep-learning Sequence Models
https://www.coursera.org/learn/nlp-sequence-models?specialization=deep-learning MLOps Specialization Machine Learning Engineering for Production (MLOps) Specialization
https://www.coursera.org/specializations/machine-learning-engineering-for-production-mlops Introduction to Machine Learning in Production
https://www.coursera.org/learn/introduction-to-machine-learning-in-production?specialization=machine-learning-engineering-for-production-mlops Machine Learning Data Lifecycle in Production
https://www.coursera.org/learn/machine-learning-data-lifecycle-in-production?specialization=machine-learning-engineering-for-production-mlops Machine Learning Modeling Pipelines in Production
https://www.coursera.org/learn/machine-learning-modeling-pipelines-in-production?specialization=machine-learning-engineering-for-production-mlops Deploying Machine Learning Models in Production
https://www.coursera.org/learn/deploying-machine-learning-models-in-production?specialization=machine-learning-engineering-for-production-mlops MLOps (Machine Learning Operations) Fundamentals (by Google Cloud)
https://www.coursera.org/learn/mlops-fundamentals ML Pipelines on Google Cloud
https://www.coursera.org/learn/ml-pipelines-google-cloud Modernizing Data Lakes and Data Warehouses with Google Cloud
https://www.coursera.org/learn/data-lakes-data-warehouses-gcp?specialization=gcp-data-machine-learning Building Batch Data Pipelines on Google Cloud
https://www.coursera.org/learn/batch-data-pipelines-gcp?specialization=gcp-data-machine-learning Building Resilient Streaming Analytics Systems on Google Cloud
https://www.coursera.org/learn/streaming-analytics-systems-gcp?specialization=gcp-data-machine-learning Smart Analytics, Machine Learning, and AI on Google Cloud
https://www.coursera.org/learn/smart-analytics-machine-learning-ai-gcp?specialization=gcp-data-machine-learning Getting Started with Google Kubernetes Engine
https://www.coursera.org/learn/google-kubernetes-engine Advanced Machine Learning on Google Cloud Specialization
https://www.coursera.org/specializations/advanced-machine-learning-tensorflow-gcp Cloud Machine Learning Engineering and MLOps
https://www.coursera.org/learn/cloud-machine-learning-engineering-mlops-duke Practical Data Science on the AWS Cloud Specialization
https://www.coursera.org/specializations/practical-data-science Hands-on Machine Learning with AWS and NVIDIA
https://www.coursera.org/learn/machine-learning-aws-nvidia DataOps Methodology https://www.coursera.org/learn/ibm-data-ops-methodology Introduction to Data Engineering
https://www.coursera.org/learn/introduction-to-data-engineering Introduction to Machine Learning on AWS
https://www.coursera.org/learn/machine-learning-on-aws Practical Decision-Making Using No-code ML on AWS
https://www.coursera.org/learn/no-code-ml-aws Generative Adversarial Networks (GANs) Specialization
https://www.coursera.org/specializations/generative-adversarial-networks-gans DeepLearning.AI TensorFlow Developer Professional Certificate
https://www.coursera.org/professional-certificates/tensorflow-in-practice Introduction to TensorFlow for Artificial Intelligence, Machine Learning, and Deep Learning
https://www.coursera.org/learn/introduction-tensorflow Data Pipelines with TensorFlow Data Services
https://www.coursera.org/learn/data-pipelines-tensorflow DevOps on AWS Specialization
https://www.coursera.org/specializations/aws-devops Practical Data Science on the AWS Cloud Specialization
https://www.coursera.org/specializations/practical-data-science DevOps on AWS: Release and Deploy
https://www.coursera.org/learn/devops-aws-release-deploy Getting Started with AWS Machine Learning
https://www.coursera.org/learn/aws-machine-learning Architecting Solutions on AWS
https://www.coursera.org/learn/architecting-solutions-on-aws Optimize ML Models and Deploy Human-in-the-Loop Pipelines
https://www.coursera.org/learn/ml-models-human-in-the-loop-pipelines Introduction to Designing Data Lakes on AWS
https://www.coursera.org/learn/introduction-to-designing-data-lakes-in-aws Building Modern Python Applications on AWS
https://www.coursera.org/learn/building-modern-python-applications-on-aws Containerized Applications on AWS
https://www.coursera.org/learn/containerized-applications-on-aws AWS Fundamentals: Building Serverless Applications
https://www.coursera.org/learn/aws-fundamentals-building-serverless-applications Build, Train, and Deploy ML Pipelines using BERT
https://www.coursera.org/learn/ml-pipelines-bert Analyze Datasets and Train ML Models using AutoML
https://www.coursera.org/learn/automl-datasets-ml-models DevOps on AWS: Code, Build, and Test
https://www.coursera.org/learn/devops-aws-code-build-test TensorFlow: Advanced Techniques Specialization
https://www.coursera.org/specializations/tensorflow-advanced-techniques TensorFlow: Data and Deployment Specialization
https://www.coursera.org/specializations/tensorflow-data-and-deployment Operating System by Neso Academy https://www.youtube.com/watch?v=vBURTt97EkA&list=PLBlnK6fEyqRiVhbXDGLXDk_OQAeuVcp2O By top providers https://www.coursera.org/deeplearning-ai https://www.coursera.org/stanford https://www.coursera.org/instructor/google-cloud-training https://cloud.google.com/training/ https://www.coursera.org/aws https://www.youtube.com/https://www.youtube.com/user/AmazonWebServices https://www.edx.org/learn/computer-programming https://www.edx.org/school/harvardx https://pll.harvard.edu/catalog?keywords=Machine+Learning&op=Search General CS: Video courses Kotlin education Coding interview university prakhar1989 awesome-courses Computer Science by CrashCourse Footnotes
Some images are generated with OpenAI DALLÂ·E 2
1openai api image.create -p &#34;Inside the future space shuttle, macbook, monitor. Pink and blue and light green colors&#34; -n 4 Have fun, Ego! ]]></content></entry><entry><title>OpenAI, ChatGPT, DALLÂ·E 2 API</title><url>/post/ai/openai-api.html</url><categories><category>ai</category><category>engineering</category><category>OpenAI</category></categories><tags><tag>ai</tag><tag>engineering</tag><tag>openai</tag><tag>API</tag><tag>ChatGPT</tag><tag>DALLÂ·E 2</tag><tag>Python</tag><tag>artificial intelligence</tag><tag>ChatGPT prompts</tag></tags><content type="html"><![CDATA[ This post is describe how to use openai API. How to use OpenAI API First off all read the preview post Awesome ChatGPT prompts 1curl https://api.openai.com/v1/completions \ 2-H &#39;Content-Type: application/json&#39; \ 3-H &#34;Authorization: Bearer $OPENAI_API_KEY&#34; \ 4-d &#39;{ 5&#34;model&#34;: &#34;text-davinci-003&#34;, 6&#34;prompt&#34;: &#34;Generate Python script for downloading from official websites and combining all logos for Android, iOS, Windows, macOS, Linux, WEB frontend and backend&#34;, 7&#34;max_tokens&#34;: 3000, 8&#34;temperature&#34;: 0 9}&#39; 1import os 2import openai 3openai.api_key = os.getenv(&#34;OPENAI_API_KEY&#34;) 4 5def raw_query(query: str): 6 return &#34; &#34;.join(query.replace(&#34;\n&#34;, &#34; &#34;).split()) 7 8 9SQL = raw_query(&#34;&#34;&#34;SELECT * FROM users&#34;&#34;&#34;) 10 11completion = openai.Completion.create( 12 engine=&#34;text-davinci-003&#34;, 13 prompt=f&#34;Optimize this SQL (PostgreSQL) code {SQL}&#34;, 14 max_tokens=3096 15) 16print(completion.choices[0][&#39;text&#39;]) DALLÂ·E 2 API
1openai api image.create -p &#34;Image with Android logo, ios logo, macos logo, linux logo, windows logo at the center&#34; -n 4 Have fun, Ego! ]]></content></entry><entry><title>Cross Platform Application Development Technologies and Solutions</title><url>/post/engineering/cross-platform-application-development-technologies-and-solutions.html</url><categories><category>engineering</category></categories><tags><tag>cross-platform</tag><tag>frontend-backend</tag></tags><content type="html">Cross Platform Application Development Technologies and Solutions
Cross-platform development one stack Cross-platform software Frontend + Backend + WEB + Mobile + OS
Client and server side one stack WEB development Have fun, Ego!</content></entry><entry><title>From Python Django to Clojure, authentication and hashers algorithm</title><url>/post/projects/clojure-django.html</url><categories><category>projects</category><category>Python</category><category>Clojure</category><category>Java</category><category>Django</category><category>Cryptography</category><category>AES</category><category>framework</category></categories><tags><tag>Python</tag><tag>Clojure</tag><tag>Java</tag><tag>Django</tag><tag>Cryptography</tag><tag>AES</tag><tag>authentication</tag><tag>session</tag><tag>cookies</tag><tag>framework</tag><tag>encrypt</tag><tag>decrypt</tag><tag>Cipher</tag></tags><content type="html"><![CDATA[ Project AES Repository: https://github.com/ego/AES This id old story, about that how we rewrite whole system from Python Django stack to Clojure and do not break authentication. Users login easily to the new system with old cookies with no problems ðŸ˜„.
Motivation Django has its own authentication system and cryptography for that. Clojure web frameworks also has own. Question, how to make users happy during new login?
Copy authentication system algorithm ðŸ˜„ But in a new language in a new system.
The algorithm In that smooth time for Django it was AES/ECB/PKCS5Padding 128/256 bits So we just need Python/Clojure encrypt/decrypt code.
Python version
File: aes_ecb_pkcs5padding_128_256.py 1##################################################################### 2# Python encrypt/decrypt code for AES/ECB/PKCS5Padding 128/256 bits # 3# # 4# 128bits == 16Bytes == 16 Chars. # 5# 256bits == 32Bytes == 32 Chars. # 6##################################################################### 7 8 9import base64 10from Crypto.Cipher import AES 11 12 13CRYPT_KEY = &#39;12345678912345678912345678912345&#39; 14_AES_CIPHER = AES.new(CRYPT_KEY) 15_BLOCK_SIZE = _AES_CIPHER.block_size 16 17 18def pad(s): 19 len_pad = _BLOCK_SIZE - (len(s) % _BLOCK_SIZE) 20 return s + (len_pad * chr(len_pad)) 21 22 23def unpad(s): 24 return s[:-ord(s[-1])] 25 26 27def encrypt(s): 28 if not isinstance(s, basestring) or not s: 29 return s 30 pad_text = pad(s.encode(&#39;utf-8&#39;)) 31 crypt_text = _AES_CIPHER.encrypt(pad_text) 32 return base64.b64encode(crypt_text) 33 34 35def decrypt(s): 36 if not isinstance(s, basestring) or not s: 37 return s 38 try: 39 crypt_text = base64.b64decode(s) 40 pad_text = _AES_CIPHER.decrypt(crypt_text) 41 text = unpad(pad_text).decode(&#39;utf-8&#39;) 42 except (ValueError, TypeError, UnicodeEncodeError, UnicodeEncodeError): 43 return s 44 return text Clojure version
File: aes_ecb_pkcs5padding_128_256.clj 1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 2;; Python/Clojure encrypt/decrypt code for AES/ECB/PKCS5Padding 128/256 bits ;; 3;; ;; 4;; Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy ;; 5;; http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html ;; 6;; ;; 7;; Copy local_policy.jar and US_export_policy.jar to the $JAVA_HOME/jre/lib/security ;; 8;; (Note: these jars will be already there so you have to overwrite them) ;; 9;; ;; 10;; Ubuntu: ;; 11;; 1. Download and unzip ;; 12;; 2. sudo cp -r UnlimitedJCEPolicy/* /usr/lib/jvm/java-8-oracle/jre/lib/security ;; 13;; ;; 14;; AES/ECB/PKCS5Padding 128/256 bits ;; 15;; ;; 16;; 128bits == 16Bytes == 16 Chars. ;; 17;; 256bits == 32Bytes == 32 Chars. ;; 18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 19 20 21(import (java.security Key) 22 (javax.crypto Cipher) 23 (javax.crypto.spec SecretKeySpec) 24 (org.apache.commons.codec.binary Base64)) 25 26(defn- to-bytes [s] 27 (cond 28 (string? s) (.getBytes s &#34;UTF-8&#34;) 29 (sequential? s) (into-array Byte/TYPE (.getBytes s &#34;UTF-8&#34;)) 30 :else s)) 31 32(defn debase64 [s] (Base64/decodeBase64 (to-bytes s))) 33(defn base64 [s] (Base64/encodeBase64String s)) 34 35(defn- ^Key secret-spec 36 [^String s] 37 (SecretKeySpec. (to-bytes s) &#34;AES&#34;)) 38 39(defn ^bytes encrypt 40 [^String s ^String key] 41 (let [cipher (doto (Cipher/getInstance &#34;AES/ECB/PKCS5Padding&#34;) 42 (.init Cipher/ENCRYPT_MODE (secret-spec key)))] 43 (.doFinal cipher (to-bytes s)))) 44 45(defn ^String decrypt 46 [^bytes buf ^String key] 47 (let [cipher (doto (Cipher/getInstance &#34;AES/ECB/PKCS5Padding&#34;) 48 (.init Cipher/DECRYPT_MODE (secret-spec key)))] 49 (String. (.doFinal cipher buf) &#34;UTF-8&#34;))) 50 51(defn encrypt-&gt;str [s key] (-&gt; (encrypt s key) base64)) 52(defn decrypt-&gt;str [s key] (-&gt; (decrypt (debase64 s) key))) Have fun!
]]></content></entry><entry><title>Software Engineering Blogs</title><url>/post/engineering/blogs.html</url><categories><category>engineering</category></categories><tags><tag>software</tag><tag>technical</tag><tag>Blog</tag></tags><content type="html"> The most interesting software engineering blogs The list of technical blogs developer.nvidia.com/blog openai.com/blog openai.com/research github.blog microsoft.com/en-us/research/blog/ microsoft.com/en-us/research blog.jetbrains.com/datalore ai.googleblog.com blog.google aws.amazon.com developers.googleblog oreilly.com/radar/ Machine Learning Mastery https://machinelearningmastery.com/blog/ instagram netflix highscalability Real Life Architectures arXiv Supabase PostgreSQL Modular AI InfiniteLambda PythonSpeed Docker PythonSpeed DataScience Security Web Application Security GTFOBins frida Personal blogs Martin Fowler Chris Lattner Murat Buffalo All Things Distributed Martin Kleppmann Kyle Kingsbury, a.k.a Aphyr Marc Brooker engineer at Amazon Web Services (AWS) in Seattle Distributed Systems Architecture charap.co Armin Ronacher NSHipster all about Swift and Apple daveceddia Coding with Mohit Kotlin and Swift Jakub Kon Zig lang Richard Palethorpe Operating Systems and HTML engineer. Jeff Glass Python/PyScript/Emscripten-Shell Dominik WeckmÃ¼ller PyScript John Hanley Martin Heinz MLOps blogs DataTalks.Club More blogs can be found here
https://feedly.com/i/top/scalability-blogs https://feedly.com/i/top/python-blogs https://bloggingfordevs.com/trends/ https://bloggingfordevs.com/aws-blogs/ Have fun, Ego!</content></entry><entry><title>Artificial Intelligence programming autocompletion tool for developers</title><url>/post/ai/programming-ai-tools.html</url><categories><category>ai</category><category>engineering</category><category>OpenAI</category></categories><tags><tag>ai</tag><tag>engineering</tag><tag>OpenAI Codex</tag><tag>GitHub Copilot</tag><tag>deepai.org</tag></tags><content type="html"><![CDATA[ This post describes how to generate code with Artificial Intelligence. Artificial intelligence programming autocompletion tool https://github.com/features/copilot/ https://openai.com/blog/openai-codex/ https://openai.com/api/ https://www.warp.dev/ https://github.com/openai/openai-cookbook#1-write-code https://visualstudio.microsoft.com/services/intellicode/ https://www.tabnine.com/ https://plugins.jetbrains.com/plugin/13574-aixcoder-code-completer https://www.useblackbox.io/landingPage https://aws.amazon.com/codewhisperer/ https://www.codiga.io/ https://datalore.jetbrains.com/ https://github.com/CodedotAl/gpt-code-clippy https://github.com/samrawal/emacs-secondmate https://ai.googleblog.com/2022/07/ml-enhanced-code-completion-improves.html https://sourcery.ai/ https://codegeex.ai/en-US/ https://codegeex.ai/codeTranslator https://codegeex.ai/playground https://github.com/EleutherAI/gpt-neo https://gpt3demo.com/ Facebookâ€™s TransCoder AI IBMâ€™s CodeNet Image generated with deepai.org and a prompt Artificial Intelligence programming autocompletion tool for developers.
Some images are generated with OpenAI DALLÂ·E 2
1curl https://api.openai.com/v1/completions \ 2-H &#39;Content-Type: application/json&#39; \ 3-H &#34;Authorization: Bearer $OPENAI_API_KEY&#34; \ 4-d &#39;{ 5&#34;model&#34;: &#34;text-davinci-003&#34;, 6&#34;prompt&#34;: &#34;&#34;, 7&#34;max_tokens&#34;: 50, 8&#34;temperature&#34;: 0 9}&#39; 10 11openai api image.create -p &#34;&#34; -n 4 Have fun, Ego! ]]></content></entry><entry><title>How to fix GitHub repository language</title><url>/post/engineering/github-repository-language.html</url><categories><category>engineering</category><category>GitHub</category></categories><tags><tag>GitHub</tag><tag>git-settings</tag><tag>linguist</tag></tags><content type="html"> How to fix GitHub repository code language if you have a question ðŸ˜„ Create file in the root directory of git repository .gitattributes
1 themes/* linguist-vendored GitHub use Linguist project to detect blob languages.
Links
File gitattributes Read more about Linguist overrides Changing the Repo Language Shown</content></entry><entry><title>MacOps</title><url>/post/projects/MacOS.html</url><categories><category>projects</category><category>Automation</category><category>AppleScript</category><category>JavaScript</category><category>Bash scripts</category><category>Python</category><category>iTerm2</category><category>Sublime</category></categories><tags><tag>macOS</tag><tag>MacOps</tag><tag>MacBook</tag><tag>Automation</tag><tag>AppleScript</tag><tag>JavaScript</tag><tag>Shell scripts</tag><tag>Bash scripts</tag><tag>Script Editor</tag><tag>Python</tag><tag>Finder</tag><tag>iTerm2</tag><tag>Sublime</tag></tags><content type="html"><![CDATA[ Project MacOps Repository: https://github.com/ego/MacOps MacOS automate tools and scripts. AppleScript and JavaScript for Automation (JXA).
Motivation Sometimes macOS application state can be broken, so we need way to restore it especially when macOS cannot do it for us.
Project automation features: * Save Finder tabs * Save iTerm2 tabs * Save Sublime tabs * Save Sublime file history from Session Save all opened Finder tabs File: SaveFinderTabs.scpt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #!/usr/bin/env osascript -l JavaScript console.log(&#34;Get and save Finder tabs.&#34;); const basePath = &#34;~/Workspaces/Finder/Tabs&#34;; const filePath = `${basePath}/$(date &#39;+%Y-%m-%d-%H&#39;).txt`; const Finder = Application(&#34;Finder&#34;); Finder.includeStandardAdditions = true; var tabSet = new Set(); const windows = Finder.finderWindows(); windows.forEach((win) =&gt; { const tab = win.target(); const path = decodeURIComponent(tab.url()).slice(7); tabSet.add(path); }); console.log(`Found tabs: ${tabSet.size}.`); var fileContent = &#34;&#34;; for (const item of tabSet) { fileContent += (item + &#39;\n&#39;); }; console.log(`Save Finder tabs to file ${basePath}.`); app = Application.currentApplication() app.includeStandardAdditions = true; app.doShellScript(`mkdir -p ${basePath}`); app.doShellScript(`echo ${JSON.stringify(fileContent)} &gt; ${filePath}`); This AppleScript/JavaScript script creates folders in ~/Workspaces/Finder/Tabs/ and save all Finder tabs to new file with name +%Y-%m-%d-%H'.txt.
Save all opened iTerm2 tabs File: SaveiTerm2Tabs.scpt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #!/usr/bin/env osascript -l JavaScript console.log(&#34;Get and save iTerm tabs.&#34;); const basePath = &#34;~/Workspaces/iTerm2/Tabs&#34;; const filePath = `${basePath}/$(date &#39;+%Y-%m-%d-%H&#39;).txt`; const iTerm2 = Application(&#34;iTerm2&#34;); iTerm2.includeStandardAdditions = true; var tabSet = new Set(); const tabs = iTerm2.currentWindow().tabs(); JSON.stringify(tabs.length); tabs.forEach((tab) =&gt; { // iterm2 https://iterm2.com/documentation-scripting.html // Variables: https://iterm2.com/documentation-variables.html const path = tab.currentSession().variable({named: &#34;path&#34;}) tabSet.add(path) }); console.log(`Found tabs: ${tabSet.size}.`); var fileContent = &#34;&#34;; for (const item of tabSet) { fileContent += (item + &#39;\n&#39;); }; console.log(`Save Finder tabs to file ${basePath}.`); app = Application.currentApplication() app.includeStandardAdditions = true; app.doShellScript(`mkdir -p ${basePath}`); app.doShellScript(`echo ${JSON.stringify(fileContent)} &gt; ${filePath}`); This AppleScript/JavaScript script creates folders in ~/Workspaces/iTerm2/Tabs/ and save all iTerm2 tabs to new file with name +%Y-%m-%d-%H'.txt.
Note about AppleScript Note about JavaScriptForAutomation How to run AppleScript/JavaScript with macOS Script Editor Script Editor Save all opened Sublime tabs from Sublime session File: SaveSublimeTabs.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #!/bin/bash # https://unix.stackexchange.com/questions/548806/how-to-get-just-two-items-of-a-json-like-file # https://softhints.com/recover-unsaved-files-sublime-linux-mac/#google_vignette SUBLIME_TABS_PATH=~/Downloads/State/SublimeTabs SUBLIME_FILE_NAME=&#34;$(date &#39;+%Y-%m-%d-%H&#39;).txt&#34; SUBLIME_LOCAL_FIND=`find ~/&#39;Library/Application Support/Sublime Text/Local&#39; -maxdepth 1 -type f -name &#34;*.sublime_session&#34;` echo echo &#39;Parse and save Sublime tabs ...&#39; echo mkdir -p &#34;$SUBLIME_TABS_PATH&#34; OIFS=&#34;$IFS&#34; IFS=$&#39;\n&#39; for file in $SUBLIME_LOCAL_FIND do echo &#34;Processing file: $file&#34; jq -r &#39;.windows[]|.buffers[]|.file&#39; &#34;$file&#34; &gt;&gt; &#34;$SUBLIME_TABS_PATH/_$SUBLIME_FILE_NAME&#34; echo &#34;------------------------------------------------------------&#34; echo done IFS=&#34;$OIFS&#34; awk &#39;!seen[$0]++&#39; &#34;$SUBLIME_TABS_PATH/_$SUBLIME_FILE_NAME&#34; &gt; &#34;$SUBLIME_TABS_PATH/$SUBLIME_FILE_NAME&#34; echo &#39;Done&#39; This sh script creates folders in ~/Downloads/State/SublimeTabs/, parse *.sublime_session files and save all Sublime tabs to new file with name +%Y-%m-%d-%H'.txt.
Save all opened Sublime tabs from Sublime session file_history This SaveSublimeFileHistory.sh sh script also parse file_history sections from *.sublime_session and save to ~/Downloads/State/SublimeFileHistory/.
Save all opened Sublime tabs from Sublime with Console snippet If you have opened Sublime and want to save all tabs, click to View then Show Console and paste this snippet Python code SaveSublimeCurrentTabs.py 1 2 3 4 5 6 7 8 import datetime; import pathlib; name = datetime.datetime.now().strftime(&#39;%Y-%m-%d-%H&#39;); tabs = list(filter(None, [v.file_name() for v in window.views()])); home = str(pathlib.Path.home()); f = open(f&#34;{home}/Workspaces/Sublime/Tabs/{name}.txt&#34;, &#34;w&#34;); f.write(&#34;\n&#34;.join(tabs)); f.close(); As a result you get file with all tabs (full path). Good luck, and save your tabs history ðŸ˜„
]]></content></entry><entry><title>OpenAI, ChatGPT, DALLÂ·E 2, create image from text prompt</title><url>/post/ai/openai-chatgpt-dall-e-2.html</url><categories><category>ai</category><category>engineering</category><category>OpenAI</category></categories><tags><tag>ai</tag><tag>engineering</tag><tag>ChatGPT</tag><tag>DALLÂ·E 2</tag><tag>Python</tag><tag>Rick and Morty</tag><tag>Python</tag><tag>openai</tag><tag>pathlib</tag><tag>artificial intelligence</tag><tag>CLI API</tag><tag>ChatGPT prompts</tag></tags><content type="html"><![CDATA[ This post is describe how to generate image from text prompt. How to use OpenAI Go to the website openai.com and create user profile. Generate new OPENAI_API_KEY. Use public API DALLÂ·E 2 DALLÂ·E 2 is a revolutionary artificial intelligence system that can generate realistic images and artwork based on descriptions provided in natural language.
Install OpenAI CLI 1 2 pip install openai export OPENAI_API_KEY=my-secret OpenAI CLI create image 1 openai api image.create -p &#34;Artificial Intelligence, future, cyberpunk, with hex color 33FFE9 and color pink&#34; -n 4 Docs api image.create OpenAI Python script create image Some fun Python code to work with Rick and Morty and OpenAI Image API.
1import shutil 2import pathlib 3import openai 4import requests # pip install requests 5from PIL import Image 6 7HOME = str(pathlib.Path.home()) 8openai.api_key = &#34;MY_SECRET_KEY&#34; 9 10def save_image(url, name): 11 r = requests.get(url, stream=True) 12 if r.status_code == 200: 13 with open(f&#39;{HOME}/Downloads/rick/{name}.png&#39;, &#39;wb&#39;) as f: 14 r.raw.decode_content = True 15 shutil.copyfileobj(r.raw, f) 16 17 18image_urls = [] 19prompts = [ 20 &#34;Rick and Morty stuck in a time loop&#34;, 21 &#34;Rick and Morty sitting on a couch, looking frustrated&#34;, 22] 23for prompt in prompts: 24 response = openai.Image.create( 25 prompt=prompt, 26 n=4, 27 size=&#34;1024x1024&#34; 28 ) 29 for data in response[&#39;data&#39;]: 30 image_urls.append(data[&#39;url&#39;]) 31 32for i, url in enumerate(image_urls): 33 save_image(url, i) API openai.Image.create_edit has some limitation, so we need to compress input image. Input images:
1foo = Image.open(f&#34;{HOME}/Downloads/rick/image_edit.png&#34;) 2foo = foo.resize((1080,1080),Image.LANCZOS) 3foo.save(f&#34;{HOME}/Downloads/rick/image_edit2.png&#34;, optimize=True, quality=75) 4 5foo1 = Image.open(f&#34;{HOME}/Downloads/rick/image_mask.png&#34;) 6foo1 = foo1.resize((1080,1080),Image.LANCZOS) 7foo1.save(f&#34;{HOME}/Downloads/rick/image_mask2.png&#34;, optimize=True, quality=75) Size optimized images:
and then we can make API call
1image_urls2 = [] 2response = openai.Image.create_edit( 3 image=open(f&#34;{HOME}/Downloads/rick/image_edit2.png&#34;, &#34;rb&#34;), 4 mask=open(f&#34;{HOME}/Downloads/rick/image_mask2.png&#34;, &#34;rb&#34;), 5 prompt=&#34;Rick and Morty stuck in a time loop&#34;, 6 n=4, 7) 8for data in response[&#39;data&#39;]: 9 image_urls2.append(data[&#39;url&#39;]) 10 11for i, url in enumerate(image_urls2): 12 save_image(url, i) Result is not so great but if you spend some time to create good prompt, you will get better one.
Links
OpenAI cookbook Awesome chatgpt prompts ]]></content></entry><entry><title>About</title><url>/about.html</url><categories/><tags/><content type="html"> Welcome to my website!
Thank you for visiting my blog and I hope you enjoy reading about my experiences and insights in the world of software engineering .
Software engineering As a results-driven software engineer with over 15 years of focused experience, I have a proven track record of delivering robust production code for high-volume businesses across various industries, including e-commerce and large retailers, game development , VoIP telecommunications, and web-based scalable services and systems . I have also worked with different parts of over Globe , for both the EU and US markets.
Education My professional journey began at the university, where I received a relevant education and obtained a master&amp;rsquo;s degree.
Soft skills From my point of view, I can say, that I sophisticated problem solver and enthusiastic team player. My coworkers know me as a deeply critical thinker who believes in logic and deductive reasoning .
Work and life My main work is related to developing software systems , the computation , and the mass-users serving over World Wide Web (WWW), Internet . So my focus is on related to software engineering topics, scalable and distributed systems, data engineering, streaming, cloud computing and so on.
I have a passion for finding efficient and simple solutions to real-world problems , and understand the importance of balancing good code quality with timely results. Throughout my career, I have spent a lot of my time leading teams, and I am proud of the results that my teams have been able to achieve. I take pride in my ability to make wise technology and architecture choices on a consistent basis.
I have no special talents. I am only passionately curious. Albert Einstein I am passionate about programming languages and researching, and constantly seek out new ideas and solutions. I easily generate new ideas, possibilities, and design elegant solutions.
I believe in intuition and inspiration. Imagination is more important than knowledge. Albert Einstein I am always striving to improve my skills and knowledge in order to stay ahead of the World curve and be the best software engineer I can be.
For I was conscious that I knew practically nothing&amp;hellip; Plato&amp;rsquo;s account of the philosopher Socrates, Apology 22d Sincerely yours Ego, Pray for ðŸ‡ºðŸ‡¦</content></entry><entry><title>Friends</title><url>/flinks.html</url><categories/><tags/><content type="html"></content></entry></search>